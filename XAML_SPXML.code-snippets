{
	// ********************************************************* НАЧАЛО СНИППЕТОВ XAML *********************************************************
	//#region
	"Action_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Action_XAML",
		"body": [
			"<Action Name=\"$1\" Source=\"$2\" Success=\"$3\" Failure=\"$4\">"
				"\t<Param Name=\"$5\" Value=\"$6\"/>"
				"\t<Param Name=\"$7\" Value=\"$8\"/>"
			"</Action>"
		],
		"description": "Описание вызываемого действия"
	}

	"Button_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Button_XAML",
		"body": [
			"<Button Click=\"$1\" Width=\"100%\" Enabled=\"${2|True,False|}\">$3</Button>"
		],
		"description": "Кнопка"
	}

	"Calendar_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Calendar_XAML",
		"body": [
			"<Calendar Name=\"$1\" Source=\"$2\" Width=\"100\" Height=\"100\" Modes=\"${3|Day,Week,Month,Monthcategory,Category|}\" SelectedView=\"${4|Day,Week,Month,Monthcategory,Category|}\"/>
		],
		"description": "Календарь"
	}

	"CheckBox_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "CheckBox_XAML",
		"body": [
			"<CheckBox Name=\"$1\" Value=\"$2\" Checked=\"${3|True,False|}\" Enabled=\"${4|True,False|}\">$5</CheckBox>"
		],
		"description": "Галочка"
	}

	"Collection_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Collection_XAML",
		"body": [
			"<Collection Name=\"$1\" Source=\"$2\">"
				"\t<Param Name=\"$3\" Value=\"$4\"/>"
				"\t<Param Name=\"$5\" Value=\"$6\"/>"
			"</Collection>"
		],
		"description": "Описание удаленной выборки"
	}

	"ComboBox_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ComboBox_XAML",
		"body": [
			"<ComboBox Name=\"$1\" Width=\"100%\" Enabled=\"${2|True,False|}\">"
				"\t<ComboBoxItem Value=\"$3\">$4</ComboBoxItem>"
			"</ComboBox>"
		],
		"description": "Раскрывающийся список"
	}

	"ComboBoxItem_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ComboBoxItem_XAML",
		"body": [
			"<ComboBoxItem Value=\"$1\">$2</ComboBoxItem>"
		],
		"description": "Элемент списка"
	}

	"Data_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Data_XAML",
		"body": [
			"<Data>"
				"\t<Row>"
					"\t\t<Cell Id=\"$1\" Value=\"$2\"/>"
				"\t</Row>"
				"\t<Row>"
					"\t\t<Cell Id=\"$3\" Value=\"$4\"/>"
				"\t</Row>"
			"</Data>"
	
		],
		"description": "Набор статических данных для дерева или таблицы"
	}

	"DataGrid_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DataGrid_XAML",
		"body": [
			"<DataGrid Name=\"$1\" Title=\"$2\" Source=\"$3\" Width=\"200\" Height=\"200\" Selection=\"${4|single,multiple,none|s}\" Hidden=\"${5|False,True|}\">"
				"\t<DataGridColumn Title=\"$6\" Value=\"$7\" Type=\"$8\" Width=\"200\" Hidden=\"${9|False,True|}\"/>"
			"</DataGrid>"
		],
		"description": "Таблица данных. Использует в качестве данных подгрузку из удаленных выборок"
	}

	"DataGridColumn_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DataGridColumn_XAML",
		"body": [
			"<DataGridColumn Title=\"$1\" Value=\"$2\" Type=\"$3\" Width=\"100%\" Hidden=\"${4|False,True|}\"/>"
		],
		"description": "Описание столбца таблицы DataGrid"
	}

	"DatePicker_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DatePicker_XAML",
		"body": [
			"<DatePicker Name=\"$1\" Width=\"100%\" Enabled=\"${2|True,False|}\">$4</DatePicker>"
		],
		"description": "Элемент для выбора даты"
	}

	
	"Dialog_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Dialog_XAML",
		"body": [
			"<Dialog Name=\"$1\" Title=\"$2\" Width=\"100%\" Height=\"50\" Source=\"$3\" Close=\"$4\">"
				"\t<Param Name=\"$5\" Value=\"Добро пожаловать в диалог!\"/>"
			"</Dialog>"
		],
		"description": "Описывает вызваемый диалог и все его параметры, также события на закрытие. Содержит параметры Param для передачи данных в XAML диалога в переменную PARAMETERS"
	}

	"Edit_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Edit_XAML",
		"body": [
			"<Edit Name=\"$1\" Width=\"100%\" Enabled=\"${2|True,False|}\" Hidden=\"${3|False,True|}\">$4</Edit>"
		],
		"description": "Элемент для ввода текста"
	}

	"EditBox_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "EditBox_XAML",
		"body": [
			"<EditBox Name=\"$1\" Width=\"100%\" Height=\"50\" Enabled=\"${2|True,False|}\">"
				"\t$3"
			"</EditBox>"
		],
		"description": "Элемент для ввода многострочного текста"
	}
	
	"Grid_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Grid_XAML",
		"body": [
			"<Grid Width=\"100%\" Hidden=\"${1|False,True|}\">"
				"\t<GridColumns>"
					"\t\t<GridColumn Width=\"200\"/>"
					"\t\t<GridColumn Width=\"300\"/>"
				"\t</GridColumns>"
				"\t<GridRow>"
					"\t\t<Label Width=\"200\" Align=\"${2|left,center,right|}\">$3</Label>"
					"\t\t<Label Width=\"200\" Align=\"${4|left,center,right|}\">$5</Label>"
				"\t</GridRow>"
				"\t<GridRow>"
					"\t\t<Label Width=\"200\" Align=\"${6|left,center,right|}\">$7</Label>"
					"\t\t<Label Width=\"200\" Align=\"${8|left,center,right|}\">$9</Label>"
				"\t</GridRow>"
			"</Grid>"
		],
		"description": "Табличная компоновка"
	}

	"Image_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Image_XAML",
		"body": [
			"<Image Source=\"$1\" Width=\"100%\" Height=\"50\" Class=\"$2\" Click=\"$3\">"
		],
		"description": "Картинка"
	}

	"Label_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Label_XAML",
		"body": [
			"<Label>$1</Label>"
		],
		"description": "Текст на форме"
	}

	"Link_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Link_XAML",
		"body": [
			"<Link Click=\"$1\">$2</Link>"
		],
		"description": "Гиперссылка"
	}

	"Panel_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Panel_XAML",
		"body": [
			"<Panel Name=\"$1\" Title=\"$2\" Source=\"$3\" Hidden=\"${4|False,True|}\">"
				"\t$5"
			"</Panel>"
		],
		"description": "Асинхронно раскрывающийся блок"
	}

	"Param_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Param_XAML",
		"body": [
			"<Param Name=\"$1\" Value=\"$2\"/>"
		],
		"description": "Параметр вызываемого удаленного действия."
	}

	"RadioButton_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "RadioButton_XAML",
		"body": [
			"<RadioButton Name=\"$1\" Value=\"$2\" Checked=\"${3|False,True|}\"/>$4</RadioButton>"
		],
		"description": "Селектор-радиокнопка"
	}
	
	"SPXMLScreen_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "SPXMLScreen_XAML",
		"body": [
			"<SPXMLScreen Name=\"$1\" Title=\"$2\" Width=\"100%\" Height=\"100%\" Maximized=\"${3|False,True|}\">"
				"\t$4"
			"</SPXMLScreen>"
		],
		"description": "Корневой элемент формы, является начальным контейнером. NB: если объявлен внутри другого SPXMLScreen'а, то превращается в StackPanel с параметрами по умолчанию."
	}

	"StackPanel_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StackPanel_XAML",
		"body": [
			"<StackPanel Name=\"$1\" Width=\"100%\" Height=\"50\" Hidden=\"${2|False,True|}\" Align=\"${3|left,center,right|}\" Orientation=\"${4|Horizontal,Vertical|}\">"
				"\t$5"
			"</StackPanel>"
		],
		"description": "Контейнер. NB: Горизонтальная ориентация будет стараться ужать содержимое до минимальной ширины. Если у дочернего элемента ширина не указана/указана в процентах, контейнер сожмет её максимально узко
		"
	}

	"Toolbar_XAML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Toolbar_XAML",
		"body": [
			"<Toolbar Width=\"100%\">
				"\t$1"			
			"</Toolbar>"
		],
		"description": "Панель с кнопочками. Содержать может: кнопки, расхлопывающиеся списки"
	}

//#endregion


	// ********************************************************* НАЧАЛО СНИППЕТОВ SPXML *********************************************************

	"ArrayOptFirstElem_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayOptFirstElem_SPXML",
		"body": [
			"ArrayOptFirstElem($1)"
		],
		"description": "Возвращает первый элемента массива"
	}

	"ArrayCount_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayCount_SPXML",
		"body": [
			"ArrayCount($1)"
		],
		"description": "Возвращает число элементов массива"
	}

	"OpenDoc_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "OpenDoc_SPXML",
		"body": [
			"OpenDoc(UrlFromDocID($1));"
		],
		"description": "Аргументы: url   - url документа (String). options   - опции открытия документа в виде param1='value1';param2='value2';... (String). Необязательный аргумент. См. Опции открытия документа XML. Результат: Объект XmlDoc"
	}

	"ArrayMerge_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayMerge_SPXML",
		"body": [
			"ArrayMerge($1, 'This.$2', '$3,')"
		],
		"description": "Возвращает строку, полученную путем склеивания данных из элементов массива"
	}

	"ArrayOptFindByKey_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayOptFindByKey_SPXML",
		"body": [
			"ArrayOptFindByKey($1, $2)"
		],
		"description": "Ищет первый элемент массива с заданным значением определнного поля (ключа). Если такой элемент не найден, возвращается undefined.
		array - массив
     	keyValue - значение ключа (String).
     	keyName - имя элемента, являющегося ключом (String). Необязательный аргумент. Если имя ключа не указано, используется первичный ключ."
	}
	
	"ArraySelect_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArraySelect_SPXML",
		"body": [
			"ArraySelect($1, 'This.$2')"
		],
		"description": "Выбирает элементы массива, удовлетворяющие заданному критерию."
	}

	"ArraySelectAll_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArraySelectAll_SPXML",
		"body": [
			"ArraySelectAll($1)"
		],
		"description": "Возвращает массив, содержащий все элементы исходного массива в виде стандартного массива Array"
	}

	"ArraySelectByKey_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArraySelectByKey_SPXML",
		"body": [
			"ArraySelectByKey($1, $2, $3)"
		],
		"description": "Выбирает элементы массива, с определенным значением заданного поля (ключа) внутри элемента.
		Функция аналогична более универсальной функции ArraySelect(), но работает быстрее."
	}

	"ArraySelectDistinct_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArraySelectDistinct_SPXML",
		"body": [
			"ArraySelectDistinct($1, $2)"
		],
		"description": "Возвращает массив уникальных значений элементов заданного массива."
	}

	"ArraySort_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArraySort_SPXML",
		"body": [
			"ArraySort($1, $2)"
		],
		"description": "Сортирует массив по заданным полям. Возвращает новый массив отсортированных значений. 
		Функция требует нечетного чилса аргументов (не менее 3-х), для каждого нового уровня сортировки добаляется 2 новых аргумента.
		array   - массив
		elemExprN   - выражение, вычисляющее значение полей относительно элемента массива, по которым осуществляется сортировка (String).
		orderN   - направление сортировки ('+' или '-') (String). Не обязательный аргумент
		Пример:
     	ArraySort( array, 'name', '+', 'date', '-' )"
	}

	"ArrayUnion_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayUnion_SPXML",
		"body": [
			"ArrayUnion($1, $2)"
		],
		"description": "Последовательное объединение нескольких массивов в один."
	}

	"IsArray_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "IsArray_SPXML",
		"body": [
			"IsArray($1)"
		],
		"description": "Проверяет, является ли аргумент массивом. Результат bool"
	}

	"ArrayRange_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ArrayRange_SPXML",
		"body": [
			"ArrayRange($1, $2, $3)"
		],
		"description": "Возвращает фрагмент массива с определенной позиции.
		array   - исходный массив
    	 pos   - начальная позиция (Integer).
     	elemsNum   - количество элементов нового массива (Integer). Необязательный аргумент. Если количестов не указано, возвращаются все элементы с начальной позиции."
	}

	"Date_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Date_SPXML",
		"body": [
			"Date($1)"
		],
		"Конструктор стандартного объекта JavaScript Date
		date   - начальное значение даты (Date) либо строка, содержащее дату (String). 
		Аргумент не является обязательным. Если аргумент не указан, объект инициализируется текущей датой."
	}

	"DateDiff_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DateDiff_SPXML",
		"body": [
			"DateDiff($1, $2)"
		],
		"Возвращает разницу между 2-мя датами в секундах. Если первая дата меньше второй, разница будет отрицательным числом."
	}

	"DateNewTime_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DateNewTime_SPXML",
		"body": [
			"DateNewTime($1)"
		],
		"Изменяет значение времени в заданной дате. Возвращает измененную дату. Если указан только первый аргумент, функция возвращает дату без времени.
		Аргументы:
			date	- дата (Date).
			hour	- час (Integer). Необязательный аргумент.
			minute	- минута (Integer). Необязательный аргумент.
			second	- секунда (Integer). Необязательный аргумент.
		Результат:
			Date"
	}

	"DateOffset_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "DateOffset_SPXML",
		"body": [
			"DateOffset($1, $2)"
		],
		"Сдвигает дату на указанное число секунд. Если значение второго аргумента отрицательное, дата сдвигается назад.
		date   - заданная дата (Date).
	    seconds   - сдвиг в секундах (Integer)."
	}

	"Day_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Day_SPXML",
		"body": [
			"Day($1)"
		],
		" Возвращает значение дня (1-31) для заданной даты. - integer"
	}
	
	"Hour_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Hour_SPXML",
		"body": [
			"Hour($1)"
		],
		"Возвращает значение часа для заданной даты - Integer. Если дата не содержит времени, возращается undefined."
	}

	"Minute_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Minute_SPXML",
		"body": [
			"Minute($1)"
		],
		"Возвращает значение минуты для заданной даты - Integer. Если дата не содержит времени, возращается undefined."
	}

	"Month_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Month_SPXML",
		"body": [
			"Month($1)"
		],
		"Возвращает номер месяца (1-12) для заданной даты - Integer"
	}

	"ParseDate_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ParseDate_SPXML",
		"body": [
			"ParseDate($1)"
		],
		"Преобразует строку с датой в большинсве изветных форматов в дату.
		В отличие от функции Date() понимает дату со словесным указанием месяца, например '1 ноября 2011 года' Результат: Date
		Аргументы:
     	date   - строка с датой (String)."
	}

	"Second_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Second_SPXML",
		"body": [
			"Second($1)"
		],
		"Возвращает значение секунд для заданной даты. Если дата не содержит значения секунд, возращается undefined."
	}

	"StrDate_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrDate_SPXML",
		"body": [
			"StrDate($1, $2)"
		],
		"Преобразует дату в строку в формате, используемом по умолчанию в операционной системе.
		Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.
		date   - Объект даты (Date).
		showTime   - Включать время (Bool). Необязательный аргумент.
		showSeconds   - Включать секунды во времени (Bool). Необязательный аргумент.
		Результат: String"
	}

	"StrLongDate_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrLongDate_SPXML",
		"body": [
			"StrLongDate($1)"
		],
		"Преобразует дату в строку в "длинном" формате (со словесным написанием месяца).
		Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку
		Результат: String"
	}

	"StrShortDate_SPXML": {
		"prefix": "StrShortDate_SPXML",
		"body": [
			"StrShortDate($1)"
		],
		"Преобразует дату в строку, с двухсимвольным форматом года.Результат: String"
	}

	"StrMimeDate_SPXML": {
		"prefix": "StrMimeDate_SPXML",
		"body": [
			"StrMimeDate($1)"
		],
		"Пребразует дату в формат MIME. StrMimeDate( Date( '26.12.2011 10:45' ) ) вернет 'Mon, 26 Dec 2011 10:45:00 +0400' Результат: Date"
	}

	
	"StrTime_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrTime_SPXML",
		"body": [
			"StrTime($1)"
		],
		"Преобразует значение времени внутри даты в строку.
		Если время не содержится внутри даты, возвращается пустая строка.Результат: String	
		StrTime( Date( '26.12.2011 10:45' ) ) вернет '10:45' "
	}

	"StrXmlDate_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrXmlDate_SPXML",
		"body": [
			"StrXmlDate($1, $2)"
		],
		"Преобразует дату в строку в формате, используемом в XML. Данный формат не зависит от региональных настроек в системе. 
		Аргументы:
		date   - Объект даты (Date).
		showTime   - Включать время (Bool). Необязательный аргумент.
		showSeconds   - Включать секунды во времени (Bool). Необязательный аргумент."
	}	

	"UtcToLocalDate_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "UtcToLocalDate_SPXML",
		"body": [
			"UtcToLocalDate($1)"
		],
		"Преобразует дату из универсального часового пояса в текущий часовой пояс. Результат: Date"
	}

	"WeekDay_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "WeekDay_SPXML",
		"body": [
			"WeekDay($1)"
		],
		"Возвращает номер дня недели для заданной даты. (0 - Воскресенье, 1 - Понедельник и т.д.) Результат: integer"
	}

	"Year_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Year_SPXML",
		"body": [
			"Year($1)"
		],
		"Возвращает значение года для заданной даты. Результат: integer"
	}

	"StrBegins_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrBegins_SPXML",
		"body": [
			"StrBegins($1, $2)"
		],
		"Проверяет, начинается ли строка на другую строку. StrBegins(str, subStr, ignoreCase)
		Аргументы:
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Необязательный аргумент.
		Результат: Bool"
	}

	"StrCharCount_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrCharCount_SPXML",
		"body": [
			"StrCharCount($1)"
		],
		"ВВозвращает количество символов в строке. Результат: integer"
	}

	"StrContains_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrContains_SPXML",
		"body": [
			"StrContains($1)"
		],
		"Проверяет, содержит ли строка другую строку в качестве подстроки.
		Аргументы: StrContains(str, subStr, ignoreCase) 
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Не обязательный аргумент.
		Результат: Bool"
	}

	"StrEnds_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrEnds_SPXML",
		"body": [
			"StrEnds($1, $2)"
		],
		"Проверяет, оканчивается ли строка на другую строку.  StrEnds(str, subStr, ignoreCase) 
		Аргументы:
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Не обязательный аргумент. Результат: Bool"
	}

	"StrIsAlphaNum_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrIsAlphaNum_SPXML",
		"body": [
			"StrIsAlphaNum($1)"
		],
		"Проверяет состоит ли строка только из цифр или латинских символов.
		Аргументы: str   - проверяемая строка (String).
		Результат: Bool"
	}

	"StrLeftRange_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrLeftRange_SPXML",
		"body": [
			"StrLeftRange($1)"
		],
		"Возвращает часть строки str, длиной length, начиная с первого символа переданной строки.
		Если второй аргумент больше длины передаваемой строки, возвращается str. StrLeftRange(str, length)
		Аргументы:
		str   - строка (String).
		length   - длина строки (Integer).
		Результат: String"
	}

	"StrLen_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrLen_SPXML",
		"body": [
			"StrLen($1)"
		],
		"Возвращает длину строки в байтах.
		Данная длина может быть больше количества символов, если приложение использует кодировку UTF-8. Результат: Integer"
	}	

	"StrLowerCase_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "StrLowerCase_SPXML",
		"body": [
			"StrLowerCase($1)"
		],
		"Переводит все символы строки в нижний регистр.
		Аргументы: str   - строка, которую необходимо преобразовать (String).
		Результат: String"
	}

	"EnableLogExt_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "EnableLogExt_SPXML",
		"body": [
			"EnableLogExt('$1', 'life-time=${2|day,month,permanent|}; use-std-event-prefix=0');"			
			"function Log(sMsg, iType)"
			"{"
				"\tvar _type = '';"
				"\tswitch (OptInt(iType, 0))"
				"\t{"
					"\t\tcase 0: _type = 'INFO'; break;"
					"\t\tcase 1: _type = 'ERROR'; break;"
					"\t\tcase 2: _type = 'ОК'; break;"
					"\t\tcase 3: _type = 'DEBUG'; break;"
					"\t\tdefault: _type = '';"
				"\t}"
				"\tLogEvent('$1', Date() + ' (' + _type + '): ' + sMsg);"
			"}"
		],
		"description": "Пишем в свой личный лог"
	}

	"Log_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "Log_SPXML",
		"body": [
			"Log('$1', $2);"
		],
		"description": "Вывод в EnableLogExt при помощи функции Log()" 
	}


	"OpenNewDoc_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "OpenNewDoc_SPXML",
		"body": [
			"try"
			"{"
				"\t$1 = OpenNewDoc($2);"
				"\t$1.BindToDb(DefaultDb);"
				"\t$1.TopElem."
				"\t$1.Save();"

			"}"
			"catch(e)"
			"{"
				"\talert(e);"
			"}"
		],
		"description": "Создание нового документа"
	}

	"LigthForm_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "LigthForm_SPXML",
		"body": [
			"var sForm = '<?xml version=\"1.0\" encoding=\"utf-8\"?>"
							"\t\t\t\t<SPXML-FORM>"
								"\t\t\t\t\t<collaborator>"
									"\t\t\t\t\t\t<pict_url TYPE=\"string\"/>"
								"\t\t\t\t\t</collaborator>"
							"\t\t\t\t</SPXML-FORM>';"
			"var sCustomForm = \"x:\\\" + Md5Hex(sForm);"
			""
			"try"
			"{"
				"\tRegisterFormFromStr(sCustomForm, sForm);"
			"}"
			"catch(e)"
			"{"
				"\talert('Не удалось зарегистрировать динамическую форму открытия карточки сотрудника, ошибка: ' + e);"
			"}"
			""
			"try" 
			"{"
				"\t$1 = OpenDoc(UrlFromDocID($2), \"drop-namespaces=1;form=\" + sCustomForm);"
			"}"
			"catch (e)"
			"{"
				"\t$1 = undefined";
			"}"
			""
			"DropFormsCache(sCustomForm);"
		],
		"description": "Открытие документа по облегчённой форме"
	}


	"XQuery_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "XQuery_SPXML",
		"body": [
			"XQuery(\"for \\$elem in ${1|active_learnings,career_reserves,collaborators,compound_programs,education_plans,forums,forum_entrys,groups,group_collaborators,learning_task_results,poll_results,statistic_recs,statistic_datas,subdivisions,subs,subscriptions,qualifications|} where \\$elem/$2 = \" + $3 + \" return \\$elem/Fields('id')\");"
		],
		"description": "Простой XQuery-запрос"
	}

	"TryCatch_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "TryCatch_SPXML",
		"body": [
			"try"
			"{"
				"\t"
			"}"
			"catch(e)"
			"{"
				"\tLog(e);"
			"}"
		],
		"description": "Конструкция try..catch"
	}

	"<for>_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "for_SPXML",
		"body": [
			"for (i = 0; i < ArrayCount($1); i++)"
			"{"
				"\t$2"
			"}"
		],
		"description": "Скобочки"
	}

	"<%%>_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "<%%>_SPXML",
		"body": [
			"<%$1%>"
		],
		"description": "Скобочки"
	}

	"SendMail": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "fSendMail",
		"body": [
			"var sAdminsGroupId = Param.GetOptProperty('AdminsGroupID', '');"
			"var sErrNotifTemplateID = Param.GetOptProperty('ErrNotifTemplateID', '');"
			"\t"
			"arrErrors = [];"
			"function SendMail(arrErrors)"
			"{"
				"\tif (arrErrors != undefined)"
				"\t{"
					"\t\tif (ArrayCount(arrErrors) > 0)"
					"\t\t{"
						"\t\t\ttry"
						"\t\t\t{"
							"\t\t\t\tvar sErrors = tools.object_to_text(arrErrors, 'json');"
						"\t\t\t}"
						"\t\t\tcatch(e)"
						"\t\t\t{"
							"\t\t\t\tLog('не удалось сформировать строку для отправки сообщения; ошибка: ' + e);"
						"\t\t\t}"
						"\t\t\ttry"
						"\t\t\t{"
							"\t\t\t\tvar sErrNotifTemplate = ArrayOptFirstElem(XQuery(\"for \\$elem in notification_templates where \\$elem/id = \" + sErrNotifTemplateID + \" return \\$elem/Fields('code')\")).code;"
							"\t\t\t\ttools.create_notification(sErrNotifTemplate, sAdminsGroupId, sErrors);"
						"\t\t\t}"
						"\t\t\tcatch(e)"
						"\t\t\t{"
							"\t\t\t\tLog('не удалось отправить сообщение; ошибка: ' + e);"
						"\t\t\t}"
					"\t\t}"
				"\t}"
				"\telse"
				"\t{"
					"\t\tLog('функции SendMail не передан параметр, отправка сообщения прервана');"
				"\t}"
			"}"
		],
		"description": "Отправка уведомлений группе администраторов"
	}

	"ShowDebug_col": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ShowDebug_col",
		"body": [
			"if (bShowDebug)"
			"{"
				"\tLog('$1' + , 3);"
			"}"
		],
		"description": "Писать в лог в режиме отладки"		
	}

	"ShowDebug_row": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ShowDebug_row",
		"body": [
			"if (bShowDebug) Log('$1' + , 3);"
		],
		"description": "Писать в лог в режиме отладки"
		
	}

	"ticks": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "ticks",
		"body": [
			"iStartTicks = GetCurTicks();"
			"alert((GetCurTicks() - iStartTicks));"
		],
		"description": "Отсечка по времени, в течение которого выполняется кусок кода"		
	}

	"header": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "header",
		"body": [
			"// --------------------------------------------------------------------------------------------------------------------------------"
			"// автор:   AZ"
			"// создан:  "
			"// изменен: "
			"// ----------------------------------------------------------- Описание -----------------------------------------------------------"
			"// "
			"// ----------------------------------------------------------- Предупреждение -----------------------------------------------------"
			"// нет"
			"// ----------------------------------------------------------- Параметры ----------------------------------------------------------"
			"// ----------------------------------------------------------- Константы ----------------------------------------------------------"
			"// нет"
			"// ----------------------------------------------------------- Функции ------------------------------------------------------------"
			"// ----------------------------------------------------------- Переменные ---------------------------------------------------------"
			"// нет"
			"// ----------------------------------------------------------- Основная область ---------------------------------------------------"
		],
		"description": "Заголовок для агентов/коллекций/действий"		
	}


	"tools_open_doc_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "tools.open_doc_SPXML",
		"body": [
			"$1 = tools.open_doc($2);"
			"if ($1 != undefined)"
			"{"
				"\t$3"
			"}"
		],
		"description": "В качестве аргумента передается ID объекта. В случае неуспешного открытия вернётся undefined. Результат: Объект XmlDoc"
	}

	"tools_read_object_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "tools.read_object_SPXML",
		"body": [
			"tools.read_object($1, '${2|json,xml|}')"
		],
		"description": "Преобразует строку в объект. Например, строку в формате json в объект. Или строку, содержащую XML, в объект."
	}

	"tools_object_to_text_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "tools.object_to_text_SPXML",
		"body": [
			"tools.object_to_text($1, '${2|json,xml|}')"
		],
		"description": "Преобразует объект в строку указанного формата (json, xml)."
	}

	"tools_array_to_text_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "tools.array_to_text_SPXML",
		"body": [
			"tools.array_to_text($1, '${2|json,xml|}')"
		],
		"description": "Преобразует массив в строку указанного формата (json, xml)."
	}

	"tools_active_learning_finish_SPXML": {
		"scope": "javascript,xml,html,brightscript",
		"prefix": "tools.active_learning_finish_SPXML",
		"body": [
			"tools.active_learning_finish($1)"
		],
		"description": "Функция завершает указанный активный электронный курс и создает карточку завершенного электронного курса."
	}

}
