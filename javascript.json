{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"OpenDoc_XML": {
		"prefix": "OpenDoc_XML",
		"body": [
			"OpenDoc(UrlFromDocID($1));"
		],
		"description": "Аргументы: url   - url документа (String).
		options   - опции открытия документа в виде "param1='value1';param2='value2';..." (String). Необязательный аргумент. См. Опции открытия документа XML
   		Результат: Объект XmlDoc"
	}

	"ArrayOptFirstElem_XML": {
		"prefix": "ArrayOptFirstElem_XML",
		"body": [
			"ArrayOptFirstElem(XQuery(\"$1\"));"
		],
		"description": "Возвращает первый элемента массива"
	}

	"ArrayCount_XML": {
		"prefix": "ArrayCount_XML",
		"body": [
			"ArrayCount($1);"
		],
		"description": "Возвращает число элементов массива"
	}

	"ArrayMerge_XML": {
		"prefix": "ArrayMerge_XML",
		"body": [
			"ArrayMerge($1, $2, $3);"
		],
		"description": "Возвращает строку, полученную путем склеивания данных из элементов массива"
	}

	"ArrayOptFindByKey_XML": {
		"prefix": "ArrayOptFindByKey_XML",
		"body": [
			"ArrayOptFindByKey($1, $2);"
		],
		"description": "Ищет первый элемент массива с заданным значением определнного поля (ключа). Если такой элемент не найден, возвращается undefined.
		array - массив
     	keyValue - значение ключа (String).
     	keyName - имя элемента, являющегося ключом (String). Необязательный аргумент. Если имя ключа не указано, используется первичный ключ."
	}
	
	"ArraySelect_XML": {
		"prefix": "ArraySelect_XML",
		"body": [
			"ArraySelect($1, $2);"
		],
		"description": "Выбирает элементы массива, удовлетворяющие заданному критерию."
	}

	"ArraySelectAll_XML": {
		"prefix": "ArraySelectAll_XML",
		"body": [
			"ArraySelect($1);"
		],
		"description": "Возвращает массив, содержащий все элементы исходного массива в виде стандартного массива Array"
	}

	"ArraySelectByKey_XML": {
		"prefix": "ArraySelectByKey_XML",
		"body": [
			"ArraySelectByKey($1, $2, $3);"
		],
		"description": "Выбирает элементы массива, с определенным значением заданного поля (ключа) внутри элемента.
		Функция аналогична более универсальной функции ArraySelect(), но работает быстрее."
	}

	"ArraySelectDistinct_XML": {
		"prefix": "ArraySelectDistinct_XML",
		"body": [
			"ArraySelectDistinct($1, $2);"
		],
		"description": "Возвращает массив уникальных значений элементов заданного массива."
	}

	"ArraySort_XML": {
		"prefix": "ArraySort_XML",
		"body": [
			"ArraySort($1, $2);"
		],
		"description": "Сортирует массив по заданным полям. Возвращает новый массив отсортированных значений. 
		Функция требует нечетного чилса аргументов (не менее 3-х), для каждого нового уровня сортировки добаляется 2 новых аргумента.
		array   - массив
		elemExprN   - выражение, вычисляющее значение полей относительно элемента массива, по которым осуществляется сортировка (String).
		orderN   - направление сортировки ('+' или '-') (String). Не обязательный аргумент
		Пример:
     	ArraySort( array, 'name', '+', 'date', '-' )"
	}

	"ArrayUnion_XML": {
		"prefix": "ArrayUnion_XML",
		"body": [
			"ArrayUnion($1, $2);"
		],
		"description": "Последовательное объединение нескольких массивов в один."
	}

	"IsArray_XML": {
		"prefix": "IsArray_XML",
		"body": [
			"IsArray($1);"
		],
		"description": "Проверяет, является ли аргумент массивом. Результат bool"
	}

	"ArrayRange_XML": {
		"prefix": "ArrayRange_XML",
		"body": [
			"ArrayRange($1, $2, $3);"
		],
		"description": "Возвращает фрагмент массива с определенной позиции.
		array   - исходный массив
    	 pos   - начальная позиция (Integer).
     	elemsNum   - количество элементов нового массива (Integer). Необязательный аргумент. Если количестов не указано, возвращаются все элементы с начальной позиции."
	}

	"Date_XML": {
		"prefix": "Date_XML",
		"body": [
			"Date($1);"
		],
		"Конструктор стандартного объекта JavaScript Date
		date   - начальное значение даты (Date) либо строка, содержащее дату (String). 
		Аргумент не является обязательным. Если аргумент не указан, объект инициализируется текущей датой."
	}

	"DateDiff_XML": {
		"prefix": "DateDiff_XML",
		"body": [
			"DateDiff($1, $2);"
		],
		"Возвращает разницу между 2-мя датами в секундах. Если первая дата меньше второй, разница будет отрицательным числом."
	}

	"DateOffset_XML": {
		"prefix": "DateOffset_XML",
		"body": [
			"DateOffset($1, $2);"
		],
		"Сдвигает дату на указанное число секунд. Если значение второго аргумента отрицательное, дата сдвигается назад.
		date   - заданная дата (Date).
	    seconds   - сдвиг в секундах (Integer)."
	}

	"Day_XML": {
		"prefix": "Day_XML",
		"body": [
			"Day($1);"
		],
		" Возвращает значение дня (1-31) для заданной даты. - integer"
	}
	
	"Hour_XML": {
		"prefix": "Hour_XML",
		"body": [
			"Hour($1);"
		],
		"Возвращает значение часа для заданной даты - Integer. Если дата не содержит времени, возращается undefined."
	}

	"Minute_XML": {
		"prefix": "Minute_XML",
		"body": [
			"Minute($1);"
		],
		"Возвращает значение минуты для заданной даты - Integer. Если дата не содержит времени, возращается undefined."
	}

	"Month_XML": {
		"prefix": "Month_XML",
		"body": [
			"Month($1);"
		],
		"Возвращает номер месяца (1-12) для заданной даты - Integer"
	}

	"ParseDate_XML": {
		"prefix": "ParseDate_XML",
		"body": [
			"ParseDate($1);"
		],
		"Преобразует строку с датой в большинсве изветных форматов в дату.
		В отличие от функции Date() понимает дату со словесным указанием месяца, например '1 ноября 2011 года' Результат: Date
		Аргументы:
     	date   - строка с датой (String)."
	}

	"Second_XML": {
		"prefix": "Second_XML",
		"body": [
			"Second($1);"
		],
		"Возвращает значение секунд для заданной даты. Если дата не содержит значения секунд, возращается undefined."
	}

	"StrDate_XML": {
		"prefix": "StrDate_XML",
		"body": [
			"StrDate($1, $2);"
		],
		"Преобразует дату в строку в формате, используемом по умолчанию в операционной системе.
		Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.
		date   - Объект даты (Date).
		showTime   - Включать время (Bool). Необязательный аргумент.
		showSeconds   - Включать секунды во времени (Bool). Необязательный аргумент.
		Результат: String"
	}

	"StrLongDate_XML": {
		"prefix": "StrLongDate_XML",
		"body": [
			"StrLongDate($1);"
		],
		"Преобразует дату в строку в "длинном" формате (со словесным написанием месяца).
		Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку
		Результат: String"
	}

	"StrShortDate_XML": {
		"prefix": "StrShortDate_XML",
		"body": [
			"StrShortDate($1);"
		],
		"Преобразует дату в строку, с двухсимвольным форматом года.Результат: String"
	}

	"StrMimeDate_XML": {
		"prefix": "StrMimeDate_XML",
		"body": [
			"StrMimeDate($1);"
		],
		"Пребразует дату в формат MIME. StrMimeDate( Date( '26.12.2011 10:45' ) ) вернет 'Mon, 26 Dec 2011 10:45:00 +0400' Результат: Date"
	}

	
	"StrTime_XML": {
		"prefix": "StrTime_XML",
		"body": [
			"StrTime($1);"
		],
		"Преобразует значение времени внутри даты в строку.
		Если время не содержится внутри даты, возвращается пустая строка.Результат: String	
		StrTime( Date( '26.12.2011 10:45' ) ) вернет '10:45' "
	}

	"StrXmlDate_XML": {
		"prefix": "StrXmlDate_XML",
		"body": [
			"StrXmlDate($1, $2);"
		],
		"Преобразует дату в строку в формате, используемом в XML. Данный формат не зависит от региональных настроек в системе. 
		Аргументы:
		date   - Объект даты (Date).
		showTime   - Включать время (Bool). Необязательный аргумент.
		showSeconds   - Включать секунды во времени (Bool). Необязательный аргумент."
	}	

	"UtcToLocalDate_XML": {
		"prefix": "UtcToLocalDate_XML",
		"body": [
			"UtcToLocalDate($1);"
		],
		"Преобразует дату из универсального часового пояса в текущий часовой пояс. Результат: Date"
	}

	"WeekDay_XML": {
		"prefix": "WeekDay_XML",
		"body": [
			"WeekDay($1);"
		],
		"Возвращает номер дня недели для заданной даты. (0 - Воскресенье, 1 - Понедельник и т.д.) Результат: integer"
	}

	"Year_XML": {
		"prefix": "Year_XML",
		"body": [
			"Year($1);"
		],
		"Возвращает значение года для заданной даты. Результат: integer"
	}

	"StrBegins_XML": {
		"prefix": "StrBegins_XML",
		"body": [
			"StrBegins($1, $2);"
		],
		"Проверяет, начинается ли строка на другую строку. StrBegins(str, subStr, ignoreCase)
		Аргументы:
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Необязательный аргумент.
		Результат: Bool"
	}

	"StrCharCount_XML": {
		"prefix": "StrCharCount_XML",
		"body": [
			"StrCharCount($1);"
		],
		"ВВозвращает количество символов в строке. Результат: integer"
	}

	"StrContains_XML": {
		"prefix": "StrContains_XML",
		"body": [
			"StrContains($1);"
		],
		"Проверяет, содержит ли строка другую строку в качестве подстроки.
		Аргументы: StrContains(str, subStr, ignoreCase) 
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Не обязательный аргумент.
		Результат: Bool"
	}

	"StrEnds_XML": {
		"prefix": "StrEnds_XML",
		"body": [
			"StrEnds($1, $2);"
		],
		"Проверяет, оканчивается ли строка на другую строку.  StrEnds(str, subStr, ignoreCase) 
		Аргументы:
		str   - строка, в которой ищут (String).
		subStr   - подстрока, которую ищут (String).
		ignoreCase   - не учитывать регистр (Bool). Не обязательный аргумент. Результат: Bool"
	}

	"StrIsAlphaNum_XML": {
		"prefix": "StrIsAlphaNum_XML",
		"body": [
			"StrIsAlphaNum($1);"
		],
		"Проверяет состоит ли строка только из цифр или латинских символов.
		Аргументы: str   - проверяемая строка (String).
		Результат: Bool"
	}

	"StrLeftRange_XML": {
		"prefix": "StrLeftRange_XML",
		"body": [
			"StrLeftRange($1);"
		],
		"Возвращает часть строки str, длиной length, начиная с первого символа переданной строки.
		Если второй аргумент больше длины передаваемой строки, возвращается str. StrLeftRange(str, length)
		Аргументы:
		str   - строка (String).
		length   - длина строки (Integer).
		Результат: String"
	}

	"StrLen_XML": {
		"prefix": "StrLen_XML",
		"body": [
			"StrLen($1);"
		],
		"Возвращает длину строки в байтах.
		Данная длина может быть больше количества символов, если приложение использует кодировку UTF-8. Результат: Integer"
	}	

	"StrLowerCase_XML": {
		"prefix": "StrLowerCase_XML",
		"body": [
			"StrLowerCase($1);"
		],
		"Переводит все символы строки в нижний регистр.
		Аргументы: str   - строка, которую необходимо преобразовать (String).
		Результат: String"
	}

}